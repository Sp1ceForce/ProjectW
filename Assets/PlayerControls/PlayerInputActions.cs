//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerControls/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""158de193-8d9a-46de-bffe-45f10a2db564"",
            ""actions"": [
                {
                    ""name"": ""BlinkSkill"",
                    ""type"": ""Button"",
                    ""id"": ""92628783-416a-401a-8fe7-07e6da2ff647"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QSkill"",
                    ""type"": ""Button"",
                    ""id"": ""3c274068-7e19-451c-9b46-dbcdc9765468"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ESkill"",
                    ""type"": ""Button"",
                    ""id"": ""d44e6cb1-9f68-4c5d-85e9-57077859df57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f441968-1b2f-4e20-870b-628770fbb883"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BlinkSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bee4ebc-ad92-4bee-832d-d756e785fc2b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b119dc8d-9176-45e5-9d44-d9771ac5a303"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ESkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_BlinkSkill = m_Player.FindAction("BlinkSkill", throwIfNotFound: true);
        m_Player_QSkill = m_Player.FindAction("QSkill", throwIfNotFound: true);
        m_Player_ESkill = m_Player.FindAction("ESkill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_BlinkSkill;
    private readonly InputAction m_Player_QSkill;
    private readonly InputAction m_Player_ESkill;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BlinkSkill => m_Wrapper.m_Player_BlinkSkill;
        public InputAction @QSkill => m_Wrapper.m_Player_QSkill;
        public InputAction @ESkill => m_Wrapper.m_Player_ESkill;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @BlinkSkill.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlinkSkill;
                @BlinkSkill.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlinkSkill;
                @BlinkSkill.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBlinkSkill;
                @QSkill.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQSkill;
                @QSkill.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQSkill;
                @QSkill.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQSkill;
                @ESkill.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnESkill;
                @ESkill.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnESkill;
                @ESkill.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnESkill;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BlinkSkill.started += instance.OnBlinkSkill;
                @BlinkSkill.performed += instance.OnBlinkSkill;
                @BlinkSkill.canceled += instance.OnBlinkSkill;
                @QSkill.started += instance.OnQSkill;
                @QSkill.performed += instance.OnQSkill;
                @QSkill.canceled += instance.OnQSkill;
                @ESkill.started += instance.OnESkill;
                @ESkill.performed += instance.OnESkill;
                @ESkill.canceled += instance.OnESkill;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnBlinkSkill(InputAction.CallbackContext context);
        void OnQSkill(InputAction.CallbackContext context);
        void OnESkill(InputAction.CallbackContext context);
    }
}
